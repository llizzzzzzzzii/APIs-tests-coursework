{"uid":"afce20fc4bb15785","name":"test_edit_file","fullName":"tests.edit_file.test_edit_file#test_edit_file","historyId":"1fdf9ca265415781e2e35f44ba294028","time":{"start":1683182057239,"stop":1683182058448,"duration":1209},"status":"failed","statusMessage":"AssertionError: Check your folder ID","statusTrace":"update_refresh_token = 'ya29.a0AWY7Ckl4AI896b9WLluRcApp5DCglXcjsSmWEsETVfPp5j5VphEHUmMYrv0n9VwyWvGv-akGjpRE_HKbD-1tj5l-D_zihU1xW_QZvfY8tFryWluvMNfbDM0AVMnTltFyKStKdVKyZwzavSx6j0zsAEsQiLWOrpdAaCgYKAbUSAQ4SFQG1tDrpo-xgLVFv6eAgwQ0f94iX-g0167'\n\n    @allure.feature(\"Проверка изменения содержимого файла\")\n    @allure.story(\"Проверка функции изменения содержимого файла\")\n    @pytest.mark.positive\n    def test_edit_file(update_refresh_token):\n        with allure.step(\"Изменение содержимого файла на Google Drive\"):\n            value = edit_file()\n        with allure.step(\"Запрос отправлен, посмотрим код ответа\"):\n            Response.log_assert(value.status_code == 200, \"Check your file ID\")\n        with allure.step(\"Проверим имя файла, который изменяли\"):\n>           Response.log_assert(value.json().get('name') == \"test.txt\", \"Check your folder ID\")\n\ntests/edit_file/test_edit_file.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = False, message = 'Check your folder ID'\n\n    @staticmethod\n    def log_assert(func, message):\n        if not func:\n            logging.error(message)\n>       assert func, message\nE       AssertionError: Check your folder ID\n\nfixtures/response.py:8: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1683182052056,"stop":1683182052056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"_verify_url","time":{"start":1683182052056,"stop":1683182052056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pytestconfig","time":{"start":1683182052056,"stop":1683182052056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"delete_output_dir","time":{"start":1683182052056,"stop":1683182052056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"update_refresh_token","time":{"start":1683182057095,"stop":1683182057238,"duration":143},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Check your folder ID","statusTrace":"update_refresh_token = 'ya29.a0AWY7Ckl4AI896b9WLluRcApp5DCglXcjsSmWEsETVfPp5j5VphEHUmMYrv0n9VwyWvGv-akGjpRE_HKbD-1tj5l-D_zihU1xW_QZvfY8tFryWluvMNfbDM0AVMnTltFyKStKdVKyZwzavSx6j0zsAEsQiLWOrpdAaCgYKAbUSAQ4SFQG1tDrpo-xgLVFv6eAgwQ0f94iX-g0167'\n\n    @allure.feature(\"Проверка изменения содержимого файла\")\n    @allure.story(\"Проверка функции изменения содержимого файла\")\n    @pytest.mark.positive\n    def test_edit_file(update_refresh_token):\n        with allure.step(\"Изменение содержимого файла на Google Drive\"):\n            value = edit_file()\n        with allure.step(\"Запрос отправлен, посмотрим код ответа\"):\n            Response.log_assert(value.status_code == 200, \"Check your file ID\")\n        with allure.step(\"Проверим имя файла, который изменяли\"):\n>           Response.log_assert(value.json().get('name') == \"test.txt\", \"Check your folder ID\")\n\ntests/edit_file/test_edit_file.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = False, message = 'Check your folder ID'\n\n    @staticmethod\n    def log_assert(func, message):\n        if not func:\n            logging.error(message)\n>       assert func, message\nE       AssertionError: Check your folder ID\n\nfixtures/response.py:8: AssertionError","steps":[{"name":"Изменение содержимого файла на Google Drive","time":{"start":1683182057239,"stop":1683182058447,"duration":1208},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Запрос отправлен, посмотрим код ответа","time":{"start":1683182058447,"stop":1683182058447,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Проверим имя файла, который изменяли","time":{"start":1683182058447,"stop":1683182058447,"duration":0},"status":"failed","statusMessage":"AssertionError: Check your folder ID\n","statusTrace":"  File \"/home/runner/work/py-pytest/py-pytest/tests/edit_file/test_edit_file.py\", line 15, in test_edit_file\n    Response.log_assert(value.json().get('name') == \"test.txt\", \"Check your folder ID\")\n  File \"/home/runner/work/py-pytest/py-pytest/fixtures/response.py\", line 8, in log_assert\n    assert func, message\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"944f123a6de2f2ba","name":"log","source":"944f123a6de2f2ba.txt","type":"text/plain","size":200},{"uid":"275624dcd4a7e186","name":"stderr","source":"275624dcd4a7e186.txt","type":"text/plain","size":120}],"parameters":[],"stepsCount":3,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"story","value":"Проверка функции изменения содержимого файла"},{"name":"feature","value":"Проверка изменения содержимого файла"},{"name":"tag","value":"positive"},{"name":"parentSuite","value":"tests.edit_file"},{"name":"suite","value":"test_edit_file"},{"name":"host","value":"fv-az168-914"},{"name":"thread","value":"2305-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.edit_file.test_edit_file"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["positive"]},"source":"afce20fc4bb15785.json","parameterValues":[]}